section .data
    key db 'mysecretkey'   ; Ключ шифрования
    key_length equ 13       ; Длина ключа
    message db 'Hello, world!', 0  ; Сообщение для шифрования
    msg_len equ 13         ; Длина сообщения

section .bss
    encrypted resb 13      ; Буфер для зашифрованного сообщения
    decrypted resb 13      ; Буфер для расшифрованного сообщения

section .text
    global _start

_start:
    ; Шифруем сообщение с использованием XOR
    mov ecx, msg_len      ; Устанавливаем количество символов для обработки
    mov esi, message      ; Адрес исходного сообщения
    mov edi, encrypted    ; Адрес зашифрованного сообщения

encrypt_loop:
    mov al, [esi]         ; Загружаем символ из сообщения
    xor al, [key + (esi - message) % key_length] ; XOR с символом ключа
    mov [edi], al         ; Сохраняем зашифрованный символ
    inc esi               ; Переходим к следующему символу сообщения
    inc edi               ; Переходим к следующему символу зашифрованного сообщения
    loop encrypt_loop     ; Повторяем, пока не обработаем все символы

    ; Печатаем зашифрованное сообщение
    mov edx, msg_len      ; Длина зашифрованного сообщения
    mov ecx, encrypted    ; Адрес зашифрованного сообщения
    call print_string

    ; Расшифровываем сообщение с использованием XOR (повторное применение того же алгоритма)
    mov ecx, msg_len      ; Устанавливаем количество символов для обработки
    mov esi, encrypted    ; Адрес зашифрованного сообщения
    mov edi, decrypted    ; Адрес расшифрованного сообщения

decrypt_loop:
    mov al, [esi]         ; Загружаем зашифрованный символ
    xor al, [key + (esi - encrypted) % key_length] ; XOR с символом ключа
    mov [edi], al         ; Сохраняем расшифрованный символ
    inc esi               ; Переходим к следующему символу зашифрованного сообщения
    inc edi               ; Переходим к следующему символу расшифрованного сообщения
    loop decrypt_loop     ; Повторяем, пока не обработаем все символы

    ; Печатаем расшифрованное сообщение
    mov edx, msg_len      ; Длина расшифрованного сообщения
    mov ecx, decrypted    ; Адрес расшифрованного сообщения
    call print_string

    ; Завершаем программу
    mov eax, 1            ; Системный вызов для завершения
    xor ebx, ebx          ; Код возврата 0
    int 0x80

print_string:
    ; Функция печати строки
    ; В edx длина строки, в ecx адрес строки
    mov eax, 4            ; Системный вызов для вывода
    mov ebx, 1            ; Дескриптор stdout
    int 0x80
    ret
